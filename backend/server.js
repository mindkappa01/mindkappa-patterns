const express = require('express');
const cors = require('cors');
const OpenAI = require('openai');

const app = express();
app.use(cors());
app.use(express.json());

// ==================== üîê MERCADO PAGO ====================
const mercadopago = require('mercadopago');

// CONFIGURE COM SUAS CHAVES - SUBSTITUA pelos seus n√∫meros
mercadopago.configure({
  access_token: 'TEST-4776420197323076-100420-7bc09edb85e7e1e7cb76deb8b546988b-608368877'
});
console.log('‚úÖ Mercado Pago configurado com sucesso');
} catch (error) {
  console.error('‚ùå Erro configurando Mercado Pago:', error);
}

// OpenAI config - chave vem das vari√°veis de ambiente
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// Rota de sa√∫de para testar
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'MindKappa Backend funcionando!',
    timestamp: new Date().toISOString()
  });
});

// Rota principal para gerar relat√≥rios
app.post('/api/generate-report', async (req, res) => {
  try {
    console.log('üì• Recebendo solicita√ß√£o de relat√≥rio...');
    const { userData } = req.body;

    if (!userData) {
      return res.status(400).json({ error: 'Dados do usu√°rio n√£o fornecidos' });
    }

    // Preparar prompt baseado no exemplo que voc√™ me enviou
    const prompt = criarPromptPersonalizado(userData);

    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: `Voc√™ √© um especialista em an√°lise de padr√µes mentais. 

IMPORTANTE: SIGA EXATAMENTE este formato e estilo:

üß† Seu Relat√≥rio Pessoal do MCD
[Nome] - Descobrindo Como Sua Mente Funciona
Data do Teste: [data]
Dura√ß√£o Total: Cerca de [X] minutos
Decis√µes Analisadas: [X] escolhas

üéØ O Que Voc√™ Fez (Resumo Simples)
[Descri√ß√£o dos 3 testes com ‚Ä¢ bullets]

üîç O Que Descobrimos Sobre Voc√™
Seu Perfil Mental: "[T√≠tulo Criativo]"
[Descri√ß√£o do perfil]

Como Sua Mente Funciona:
[‚Ä¢ Pontos com emojis]

üåü O Que Isso Significa Para Voc√™
Pontos Fortes da Sua Mente:
[‚Ä¢ Lista]
Curiosidades Sobre Voc√™:
[‚Ä¢ Lista]

üé≤ Comparando Voc√™ Com Outras Pessoas
[Compara√ß√£o e "Seu Tipo Mental"]

üí° Dicas Para o Seu Dia a Dia
Use Seus Pontos Fortes:
[‚Ä¢ Dicas]
Para Expandir Ainda Mais:
[‚Ä¢ Dicas]

üéâ Mensagem Final
[Mensagem inspiradora]

TOM: Conversacional, motivador, "UAU", sempre positivo, pr√°tico com exemplos da vida real.`
        },
        {
          role: "user",
          content: prompt
        }
      ],
      max_tokens: 1800,
      temperature: 0.7
    });

    console.log('‚úÖ Relat√≥rio gerado com sucesso');
    
    res.json({ 
      success: true,
      relatorio: completion.choices[0].message.content,
      insights: [
        "An√°lise completa dos seus padr√µes mentais",
        "Compara√ß√£o com perfis similares", 
        "Recomenda√ß√µes personalizadas"
      ]
    });

  } catch (error) {
    console.error('‚ùå Erro no backend:', error);
    res.status(500).json({ 
      success: false,
      error: 'Erro ao gerar relat√≥rio: ' + error.message
    });
  }
});

// Fun√ß√£o para criar prompt personalizado
function criarPromptPersonalizado(userData) {
  const teste1 = analisarTeste1(userData.teste1);
  const teste2 = analisarTeste2(userData.teste2);
  const teste3 = analisarTeste3(userData.teste3);

  return `Gere um relat√≥rio NO ESTILO EXATO do exemplo para:

NOME: ${userData.name}
IDADE: ${userData.age}
G√äNERO: ${userData.gender}
EMO√á√ÉO INICIAL: ${userData.emotion}

RESULTADOS DETALHADOS:

TESTE 1 - INSTINTO PURO (50 decis√µes):
‚Ä¢ O que a pessoa fez: ${teste1.resumo}
‚Ä¢ Padr√£o detectado: ${teste1.padrao}
‚Ä¢ Revela√ß√£o: ${teste1.revelacao}

TESTE 2 - EQUIL√çBRIO MENTAL (40 decis√µes):
‚Ä¢ O que a pessoa fez: ${teste2.resumo} 
‚Ä¢ Precis√£o: ${teste2.precisao}
‚Ä¢ Habilidade: ${teste2.habilidade}

TESTE 3 - PRESS√ÉO TEMPORAL (30 decis√µes):
‚Ä¢ O que a pessoa fez: ${teste3.resumo}
‚Ä¢ Performance: ${teste3.performance}
‚Ä¢ Adapta√ß√£o: ${teste3.adaptacao}

Crie um relat√≥rio PERSONALIZADO que gere "UAU" - destacando os padr√µes √∫nicos e talentos espec√≠ficos.`;
}

// Fun√ß√µes de an√°lise
function analisarTeste1(teste1) {
  if (!teste1?.decisions) return { resumo: 'Padr√µes em an√°lise', padrao: 'Emergente', revelacao: 'Em observa√ß√£o' };
  
  const azul = teste1.decisions.filter(d => d.choice === 'azul').length;
  const vermelho = teste1.decisions.filter(d => d.choice === 'vermelho').length;
  
  let padrao, revelacao;
  if (azul === 50) {
    padrao = '100% azul';
    revelacao = 'Comprometimento total com suas escolhas iniciais';
  } else if (vermelho === 50) {
    padrao = '100% vermelho'; 
    revelacao = 'Consist√™ncia impressionante nos primeiros impulsos';
  } else {
    padrao = 'Misturado';
    revelacao = 'Flexibilidade natural nas decis√µes r√°pidas';
  }
  
  return {
    resumo: `${azul} azuis, ${vermelho} vermelhos`,
    padrao,
    revelacao
  };
}

function analisarTeste2(teste2) {
  if (!teste2?.finalCounts) return { resumo: 'Dados em an√°lise', precisao: 'Em observa√ß√£o', habilidade: 'Em desenvolvimento' };
  
  const azul = teste2.finalCounts.azul || 0;
  const vermelho = teste2.finalCounts.vermelho || 0;
  const diff = Math.abs(azul - vermelho);
  
  let precisao, habilidade;
  if (diff === 0) {
    precisao = 'PERFEITA (50/50 exato!)';
    habilidade = 'Precis√£o absoluta em atingir objetivos';
  } else if (diff <= 2) {
    precisao = 'Excelente';
    habilidade = 'Grande capacidade de controle';
  } else {
    precisao = 'Boa com prefer√™ncias pessoais';
    habilidade = 'Autenticidade nas escolhas conscientes';
  }
  
  return {
    resumo: `${azul} azuis, ${vermelho} vermelhos`,
    precisao,
    habilidade
  };
}

function analisarTeste3(teste3) {
  if (!teste3?.pressureAnalysis) return { resumo: 'Dados em an√°lise', performance: 'Em observa√ß√£o', adaptacao: 'Em desenvolvimento' };
  
  const timeouts = teste3.pressureAnalysis.totalTimeouts || 0;
  
  let performance, adaptacao;
  if (timeouts === 0) {
    performance = 'Excelente - manteve a clareza sob press√£o';
    adaptacao = 'Alta resist√™ncia ao estresse temporal';
  } else if (timeouts <= 3) {
    performance = 'Boa - adapta√ß√£o eficiente';
    adaptacao = 'Boa capacidade de ajuste sob press√£o';
  } else {
    performance = 'Interessante - padr√µes √∫nicos sob estresse';
    adaptacao = 'Resposta aut√™ntica √† acelera√ß√£o';
  }
  
  return {
    resumo: `${timeouts} timeouts em 30 decis√µes`,
    performance,
    adaptacao
  };
}

app.get('/', (req, res) => {
  res.json({ 
    status: 'OK', 
    service: 'MindKappa Backend',
    timestamp: new Date().toISOString()
  });
});

// ==================== üí∞ CRIAR ASSINATURA ====================
// ==================== üí∞ CHECKOUT B√ÅSICO MERCADO PAGO ====================
app.post('/api/simple-subscription', async (req, res) => {
  try {
    console.log('üí∞ Criando checkout b√°sico...');
    
    // ‚úÖ CHECKOUT B√ÅSICO - m√©todo mais confi√°vel
    const preference = {
      items: [
        {
          title: 'MindKappa Premium - Acesso Mensal',
          unit_price: 0.01,
          quantity: 1,
          currency_id: 'BRL'
        }
      ],
      back_urls: {
        success: 'https://mindkappa-patterns.vercel.app/success.html',
        failure: 'https://mindkappa-patterns.vercel.app',
        pending: 'https://mindkappa-patterns.vercel.app'
      },
      auto_return: 'approved',
      statement_descriptor: 'MINDKAPPA'
    };

    console.log('üì¶ Criando prefer√™ncia...');
    const result = await mercadopago.preferences.create(preference);
    
    console.log('‚úÖ Checkout criado:', result.body.id);
    
    res.json({
      success: true,
      payment_link: result.body.init_point,
      id: result.body.id
    });

  } catch (error) {
    console.error('‚ùå Erro no checkout:', error);
    
    // ‚úÖ DETALHE DO ERRO ESPEC√çFICO
    if (error.message.includes('invalid_token')) {
      res.status(500).json({
        success: false,
        error: 'Token do Mercado Pago inv√°lido. Verifique as credenciais.'
      });
    } else {
      res.status(500).json({
        success: false,
        error: 'Erro Mercado Pago: ' + error.message
      });
    }
  }
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ MindKappa Backend rodando na porta ${PORT}`);
  console.log(`üìç Health check: http://localhost:${PORT}/health`);
});



