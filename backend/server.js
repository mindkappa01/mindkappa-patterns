const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');
const OpenAI = require('openai');
const MCDCore = require('./mcd-core');
const mercadopago = require('mercadopago');

const app = express();

// ‚úÖ CORS QUE FUNCIONA
app.use(cors({
    origin: true,
    credentials: true
}));

app.get('/healthz', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    service: 'mindkappa-backend',
    version: '1.0.0'
  });
});

app.use(express.json());

mercadopago.configure({
  access_token: process.env.MERCADOPAGO_ACCESS_TOKEN
});

// ‚úÖ CONFIGURA√á√ïES CONTROLADAS (INTERRUPTORES)
const OPENAI_ENABLED = process.env.OPENAI_ENABLED === 'true';
const OPENAI_TIMEOUT = parseInt(process.env.OPENAI_TIMEOUT) || 10000;

console.log('üîß Configura√ß√µes Seguras:', {
    OPENAI_ENABLED,
    OPENAI_TIMEOUT
});

// ‚úÖ CONEX√ÉO COM BANCO
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
});

// ‚úÖ OPENAI (SE CONFIGURADO)
let openai;
if (process.env.OPENAI_API_KEY && OPENAI_ENABLED) {
    openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY
    });
    console.log('‚úÖ OpenAI configurado (controlado)');
} else {
    console.log('üîÑ OpenAI desligado por configura√ß√£o');
}

// ‚úÖ HEALTH CHECK
app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        openai_enabled: OPENAI_ENABLED,
        timestamp: new Date().toISOString()
    });
});

// ‚úÖ SALVAR DADOS (J√Å FUNCIONA)
app.post('/api/save-research-data', async (req, res) => {
    try {
        const { userData } = req.body;
        console.log('üíæ Salvando dados para:', userData?.name);
        
        const result = await pool.query(
            `INSERT INTO mindkappa_sessions1 (user_data) VALUES ($1) RETURNING id`,
            [userData]
        );

        console.log('‚úÖ Dados salvos! ID:', result.rows[0].id);
        
        res.json({ 
            success: true, 
            sessionId: result.rows[0].id
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao salvar:', error.message);
        
        res.json({ 
            success: true,
            sessionId: 'mk-' + Date.now(),
            fallback: true
        });
    }
});

// ‚úÖ NOVA ROTA: C√ÅLCULO DE COER√äNCIA COM MCD CORE
app.post('/api/calculate-coherence', async (req, res) => {
    try {
        const { choices, testType, sessionId } = req.body;
        
        console.log(`üß† Calculando coer√™ncia: ${testType}, ${choices.length} escolhas`);

        // ‚úÖ VALIDAR E CALCULAR COM MCD CORE
        MCDCore.validateChoices(choices);
        const report = MCDCore.generateReport(choices);

        // ‚úÖ SALVAR NO BANCO (OPCIONAL)
        let dbResult;
        try {
            dbResult = await pool.query(
                `INSERT INTO mindkappa_coherence (session_id, test_type, choices, kappa_value, r_value, coherence_level) 
                 VALUES ($1, $2, $3, $4, $5, $6) RETURNING id`,
                [sessionId, testType, choices, report.kappa, report.R, report.coherenceLevel]
            );
            console.log('‚úÖ Coer√™ncia salva no BD:', dbResult.rows[0].id);
        } catch (dbError) {
            console.log('üìù Coer√™ncia calculada (n√£o salva no BD):', dbError.message);
        }

        res.json({
            success: true,
            testType: testType || 'unknown',
            sessionId: sessionId || 'anonymous',
            coherence: {
                kappa: report.kappa,
                level: report.coherenceLevel,
                description: report.description,
                emoji: report.emoji,
                color: report.color
            },
            statistics: report.statistics,
            metrics: {
                R: report.R,
                N: report.N,
                timestamp: report.timestamp
            },
            savedToDb: !!dbResult
        });

    } catch (error) {
        console.error('‚ùå Erro no c√°lculo de coer√™ncia:', error);
        res.status(400).json({
            success: false,
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

function gerarPromptGratuito(userData) {
    return `
AN√ÅLISE MINDKAPPA PARA: ${userData.name || 'Explorador'}

SEUS PADR√ïES DECISIONAIS REVELADOS:

${userData.teste1?.coherence ? `‚ö° INSTINTO: ${userData.teste1.coherence.level} (Œ∫ = ${userData.teste1.coherence.kappa.toFixed(2)})` : '‚ö° INSTINTO: Em an√°lise'}
${userData.teste2?.coherence ? `‚öñÔ∏è EQUIL√çBRIO: ${userData.teste2.coherence.level} (Œ∫ = ${userData.teste2.coherence.kappa.toFixed(2)})` : '‚öñÔ∏è EQUIL√çBRIO: Em an√°lise'}  
${userData.teste3?.coherence ? `‚è∞ PRESS√ÉO: ${userData.teste3.coherence.level} (Œ∫ = ${userData.teste3.coherence.kappa.toFixed(2)})` : '‚è∞ PRESS√ÉO: Em an√°lise'}

üîç PADR√ÉO IDENTIFICADO:
${gerarInsightGratuito(userData)}

üí° O QUE ISSO REVELA?
Seu estilo √∫nico de decis√£o mostra caracter√≠sticas interessantes que podem ser otimizadas.

üéØ QUER SABER TUDO?
No relat√≥rio premium voc√™ descobre:
‚Ä¢ A ci√™ncia por tr√°s do seu perfil Œ∫
‚Ä¢ Estrat√©gias para decis√µes mais conscientes
‚Ä¢ Compara√ß√£o com nossa base cient√≠fica exclusiva

Continue sua jornada de autoconhecimento!

M√°ximo 130 palavras. Seja curioso e motivador.
`;
}

function gerarInsightGratuito(userData) {
    const testes = [userData.teste1, userData.teste2, userData.teste3].filter(t => t?.coherence);
    
    if (testes.length === 0) return "Seus dados est√£o sendo processados...";
    
    const kappas = testes.map(t => t.coherence.kappa);
    const avgKappa = kappas.reduce((a, b) => a + b, 0) / kappas.length;
    
    if (avgKappa > 0.7) return "Consist√™ncia not√°vel em suas escolhas - voc√™ tem clareza interna.";
    if (avgKappa > 0.4) return "Balan√ßo interessante entre intui√ß√£o e adaptabilidade.";
    return "Padr√£o flex√≠vel que se adapta a diferentes contextos.";
}

// ‚úÖ RELAT√ìRIO SEGURO COM INTERRUPTOR
app.post('/api/generate-report', async (req, res) => {
    try {
        const { userData } = req.body;
        console.log('üß† Gerando relat√≥rio para:', userData?.name);

        let relatorio, source;

        // ‚úÖ INTERRUPTOR: OPENAI LIGADO/DESLIGADO
        if (OPENAI_ENABLED && openai) {
            console.log('üîÑ Tentando OpenAI...');
            
            try {
                const completion = await Promise.race([
                    openai.chat.completions.create({
                        model: "gpt-3.5-turbo",
                        messages: [{
                            role: "user",
                            content: gerarPromptGratuito(userData)
}],
                        max_tokens: 150,
                        temperature: 0.7
                    }),
                    new Promise((_, reject) => 
                        setTimeout(() => reject(new Error('Timeout')), OPENAI_TIMEOUT)
                    )
                ]);

                relatorio = completion.choices[0].message.content;
                source = 'openai';
                console.log('‚úÖ OpenAI funcionou!');
                
            } catch (openaiError) {
                console.log('üîÑ OpenAI falhou, usando fallback:', openaiError.message);
            }
        }

        // ‚úÖ FALLBACK GARANTIDO (sempre funciona)
        if (!relatorio) {
            relatorio = `Relat√≥rio personalizado para ${userData?.name}. Seus 3 testes de padr√µes mentais foram analisados com sucesso! Padr√µes √∫nicos detectados.`;
            source = 'fallback';
        }

        res.json({ 
            success: true,
            relatorio: relatorio,
            source: source
        });

    } catch (error) {
        console.error('‚ùå Erro geral:', error);
        
        res.json({
            success: true,
            relatorio: 'An√°lise conclu√≠da. Seus dados foram processados com sucesso!',
            source: 'emergency_fallback'
        });
    }
});

// ‚úÖ MERCADO PAGO (J√Å FUNCIONA)
app.post('/api/simple-subscription', async (req, res) => {
  try {
    console.log('üîÑ Criando pagamento com PIX...');
    
    const preference = {
      items: [
        {
          title: 'Relat√≥rio Premium MindKappa',
          unit_price: 9.90,
          quantity: 1,
          currency_id: 'BRL',
          description: 'An√°lise profunda do seu padr√£o decisional com relat√≥rio PDF completo'
        }
      ],
      back_urls: {
        success: `${process.env.FRONTEND_URL}/success.html`,
        failure: `${process.env.FRONTEND_URL}/failure.html`,
        pending: `${process.env.FRONTEND_URL}/pending.html`
      },
      auto_return: 'approved',
      statement_descriptor: 'MINDKAPPA',
      
      // ‚úÖ NOVO: CONFIGURA√á√ÉO PIX
      payment_methods: {
        excluded_payment_types: [
          { id: 'ticket' }, // Remove boleto
          { id: 'atm' }     // Remove caixa eletr√¥nico
        ],
        default_installments: 1,
        excluded_payment_methods: [
          { id: 'debvisa' }, // Remove d√©bito
          { id: 'debmaster' }
        ]
      },
      
      // ‚úÖ PIX AUTOM√ÅTICO (30 minutos)
      pix: {
        expiration: 1800 // 30 minutos em segundos
      }
    };

    const response = await mercadopago.preferences.create(preference);
    
    console.log('‚úÖ Pagamento PIX criado:', response.body.id);
    
    res.json({
      success: true,
      payment_link: response.body.init_point,
      fallback: false,
      // ‚úÖ NOVO: DADOS PIX ESPEC√çFICOS
      pix_data: response.body.pix || null
    });

  } catch (error) {
    console.error('‚ùå Erro Mercado Pago:', error);
    res.status(500).json({
      success: false,
      error: 'Erro ao criar pagamento',
      fallback: true
    });
  }
});

const PORT = process.env.PORT || 3001;

app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ MindKappa Backend SEGURO rodando na porta ${PORT}`);
    console.log(`üß† MCD Core: ATIVO`);
    console.log(`üí≥ Mercado Pago: ${process.env.MERCADOPAGO_ACCESS_TOKEN ? 'PRONTO PARA PAGAMENTOS' : 'CONFIGURAR'}`);
    console.log(`ü§ñ OpenAI: ${OPENAI_ENABLED ? 'LIGADO' : 'DESLIGADO'}`);
    console.log(`üîó Frontend: ${process.env.FRONTEND_URL || 'N√ÉO CONFIGURADO'}`);
    console.log(`üìä Health: http://localhost:${PORT}/health`);
});

// ‚úÖ MANTER PROCESSO ATIVO (OPCIONAL MAS RECOMENDADO)
process.on('SIGTERM', () => {
    console.log('üîÑ Servidor recebeu SIGTERM, encerrando graciosamente...');
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('üîÑ Servidor reiniciando...');
    process.exit(0);
});

