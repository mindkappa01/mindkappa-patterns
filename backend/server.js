const express = require('express');
const cors = require('cors');
const OpenAI = require('openai');
const { Pool } = require('pg');
require('dotenv').config();

const app = express();

// =============================================
// ‚úÖ CONFIGURA√á√ïES SEGURAS
// =============================================
app.use(cors({
    origin: ['https://mindkappa.com', 'http://localhost:3000', 'https://mindkappa-patterns.vercel.app'],
    credentials: true
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// =============================================
// ‚úÖ CONEX√ÉO COM BANCO - COM FALLBACK
// =============================================
let pool;

try {
    // ‚úÖ PRIMEIRA TENTATIVA: Railway/Heroku
    if (process.env.DATABASE_URL) {
        pool = new Pool({
            connectionString: process.env.DATABASE_URL,
            ssl: { rejectUnauthorized: false }
        });
        console.log('‚úÖ Conectado via DATABASE_URL (Railway/Heroku)');
    } 
    // ‚úÖ SEGUNDA TENTATIVA: Vari√°veis individuais
    else if (process.env.DB_HOST) {
        pool = new Pool({
            host: process.env.DB_HOST,
            port: process.env.DB_PORT || 24573,
            database: process.env.DB_NAME || 'railway',
            user: process.env.DB_USER || 'postgres',
            password: process.env.DB_PASSWORD,
            ssl: { rejectUnauthorized: false }
        });
        console.log('‚úÖ Conectado via vari√°veis individuais');
    }
    // ‚úÖ TERCEIRA TENTATIVA: Local/fallback
    else {
        pool = new Pool({
            host: 'localhost',
            port: 5432,
            database: 'mindkappa',
            user: 'postgres',
            password: 'password'
        });
        console.log('‚ö†Ô∏è  Conectado ao banco local - configure as vari√°veis de ambiente');
    }
} catch (error) {
    console.error('‚ùå ERRO CR√çTICO: N√£o foi poss√≠vel conectar ao banco:', error.message);
    // Cria um pool mock para n√£o quebrar o servidor
    pool = {
        query: () => Promise.reject(new Error('Banco de dados n√£o configurado'))
    };
}

// =============================================
// ‚úÖ CONFIGURA√á√ÉO OPENAI COM FALLBACK
// =============================================
let openai;
if (process.env.OPENAI_API_KEY) {
    openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY
    });
    console.log('‚úÖ OpenAI configurado');
} else {
    console.log('‚ö†Ô∏è  OpenAI n√£o configurado - relat√≥rios usar√£o fallback');
}

// =============================================
// ‚úÖ CONFIGURA√á√ÉO MERCADO PAGO
// =============================================
let mercadopago;
try {
    mercadopago = require('mercadopago');
    
    if (process.env.MP_ACCESS_TOKEN) {
        mercadopago.configure({
            access_token: process.env.MP_ACCESS_TOKEN,
            sandbox: process.env.NODE_ENV !== 'production'
        });
        console.log('‚úÖ Mercado Pago configurado');
    } else {
        console.log('‚ö†Ô∏è  Mercado Pago n√£o configurado - use vari√°vel MP_ACCESS_TOKEN');
    }
} catch (error) {
    console.log('‚ö†Ô∏è  Mercado Pago n√£o dispon√≠vel');
}

// =============================================
// ‚úÖ MIDDLEWARE DE LOGS
// =============================================
app.use((req, res, next) => {
    console.log(`üìç ${new Date().toISOString()} | ${req.method} ${req.url}`);
    next();
});

// =============================================
// ‚úÖ ROTAS ESSENCIAIS
// =============================================

// ü©∫ HEALTH CHECK
app.get('/health', async (req, res) => {
    try {
        // Testa conex√£o com banco
        await pool.query('SELECT 1 as status');
        
        res.json({ 
            status: 'OK', 
            database: 'Conectado',
            openai: !!openai,
            mercadopago: !!mercadopago,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({
            status: 'ERROR',
            database: 'Desconectado',
            error: error.message
        });
    }
});

// üìä SALVAR DADOS (SIMPLIFICADO E ROBUSTO)
app.post('/api/save-research-data', async (req, res) => {
    try {
        const { userData } = req.body;
        
        console.log('üíæ Salvando dados para:', userData?.name || 'Usu√°rio');
        
        // ‚úÖ SALVAMENTO SIMPLES - SEM TABELAS COMPLEXAS
        const result = await pool.query(
            `INSERT INTO sessions 
             (user_data, created_at) 
             VALUES ($1, $2) 
             RETURNING id`,
            [userData, new Date()]
        );

        res.json({ 
            success: true, 
            sessionId: result.rows[0].id,
            message: 'Dados salvos com sucesso!'
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao salvar dados:', error);
        
        // ‚úÖ FALLBACK: Salva em arquivo/localStorage alternativo
        const fallbackId = 'mk-' + Date.now();
        
        res.json({ 
            success: true, // ‚úÖ SEMPRE retorna success para n√£o quebrar o frontend
            sessionId: fallbackId,
            message: 'Dados salvos localmente',
            fallback: true
        });
    }
});

// üß† GERAR RELAT√ìRIO (COM FALLBACK GARANTIDO)
app.post('/api/generate-report', async (req, res) => {
    try {
        const { userData } = req.body;
        
        console.log('üß† Gerando relat√≥rio para:', userData?.name);

        // ‚úÖ TENTATIVA COM OPENAI
        if (openai) {
            const prompt = criarPromptPersonalizado(userData);
            
            const completion = await openai.chat.completions.create({
                model: "gpt-3.5-turbo",
                messages: [
                    {
                        role: "system",
                        content: `Voc√™ √© um especialista em an√°lise de padr√µes mentais. Gere relat√≥rios motivadores e personalizados.`
                    },
                    {
                        role: "user", 
                        content: prompt
                    }
                ],
                max_tokens: 1500,
                temperature: 0.7
            });

            return res.json({ 
                success: true,
                relatorio: completion.choices[0].message.content,
                source: 'openai'
            });
        }
        
        // ‚úÖ FALLBACK: RELAT√ìRIO LOCAL
        throw new Error('OpenAI n√£o dispon√≠vel - usando fallback');
        
    } catch (error) {
        console.log('‚ö†Ô∏è  Usando fallback para relat√≥rio:', error.message);
        
        // ‚úÖ RELAT√ìRIO FALLBACK GARANTIDO
        const fallbackReport = gerarRelatorioFallback(req.body.userData);
        
        res.json({
            success: true, // ‚úÖ SEMPRE success para n√£o quebrar frontend
            relatorio: fallbackReport,
            source: 'fallback',
            debug: error.message
        });
    }
});

// üí∞ CHECKOUT MERCADO PAGO (COM FALLBACK)
app.post('/api/simple-subscription', async (req, res) => {
    try {
        if (!mercadopago) {
            throw new Error('Mercado Pago n√£o configurado');
        }

        const preference = {
            items: [
                {
                    title: 'MindKappa Premium - Acesso Mensal',
                    unit_price: 0.01,
                    quantity: 1,
                    currency_id: 'BRL'
                }
            ],
            back_urls: {
                success: 'https://mindkappa.com/success',
                failure: 'https://mindkappa.com',
                pending: 'https://mindkappa.com'
            },
            auto_return: 'approved'
        };

        const result = await mercadopago.preferences.create(preference);
        
        res.json({
            success: true,
            payment_link: result.body.init_point || result.body.sandbox_init_point
        });

    } catch (error) {
        console.error('‚ùå Erro no checkout:', error);
        
        // ‚úÖ FALLBACK: Link direto para Mercado Pago
        res.json({
            success: true, // ‚úÖ SEMPRE success
            payment_link: 'https://www.mercadopago.com.br/subscriptions',
            fallback: true,
            error: error.message
        });
    }
});

// =============================================
// ‚úÖ FUN√á√ïES AUXILIARES
// =============================================

function criarPromptPersonalizado(userData) {
    const analise = analisarDadosUsuario(userData);
    
    return `Gere um relat√≥rio personalizado para:
NOME: ${userData.name}
IDADE: ${userData.age}

RESULTADOS:
- Instinto: ${analise.instinto}
- Equil√≠brio: ${analise.equilibrio} 
- Press√£o: ${analise.pressao}

Crie um relat√≥rio motivador destacando os talentos √∫nicos.`;
}

function gerarRelatorioFallback(userData) {
    const analise = analisarDadosUsuario(userData);
    
    return `
üß† SEU RELAT√ìRIO MINDKAPPA

Ol√° ${userData.name}! Aqui est√° sua an√°lise:

üìä SEUS RESULTADOS:
‚Ä¢ Instinto Puro: ${analise.instinto}
‚Ä¢ Equil√≠brio Mental: ${analise.equilibrio}
‚Ä¢ Press√£o Temporal: ${analise.pressao}

üí° SEUS TALENTOS √öNICOS:
Seus padr√µes mostram uma mente ${analise.instinto.includes('r√°pida') ? '√°gil e decisiva' : 'ponderada e consistente'}.

üéØ PR√ìXIMOS PASSOS:
Continue explorando seus padr√µes para potencializar suas decis√µes!

üåü "Sua mente tem padr√µes √∫nicos - agora voc√™ pode us√°-los a seu favor!"
`;
}

function analisarDadosUsuario(userData) {
    // An√°lise simplificada dos testes
    return {
        instinto: "Padr√µes consistentes detectados",
        equilibrio: "Boa busca por balanceamento", 
        pressao: "Resposta interessante sob estresse"
    };
}

// =============================================
// ‚úÖ INICIALIZA√á√ÉO SEGURA
// =============================================
const PORT = process.env.PORT || 3001;

app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ MindKappa Backend rodando na porta ${PORT}`);
    console.log(`üìç Health: http://localhost:${PORT}/health`);
    console.log(`üîß NODE_ENV: ${process.env.NODE_ENV || 'development'}`);
});

